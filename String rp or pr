Given a string S. In one operation, you can remove the substring “pr” from the string S and get amount X or you can remove the substring “rp” and get the amount Y. 
Find the maximum amount you can get if you perform zero or more such operations optimally. 

Note : 

Substring of a string S is defined as a continuous sequence of characters in S.
After removing “pr” or “rp”, the order of remaining letters should remain the same.

Example:

Input:
X=5 , Y=4
S = "abppprrr"

Output: 15

Explanation: 
Here, S="abppprrr" 
X= 5, Y=4.
Remove "pr", new string S="abpprr".
Remove "pr", new string S="abpr".
Remove "pr", new string S="ab".
In total, we removed "pr" 3 times, 
so total score is 3*X + 0*Y = 3*5 =15.

Your Task: 
You don't need to read input or print anything. Your task is to complete the function solve() which takes the X ,Y and string S as input parameters and returns the maximum amount you can get after performing the above operations.


Expected Time Complexity: O(|S|)
Expected Auxiliary Space: O(1)


Constraints:
1 <= |S| <= 105
1 <= X,Y <= 105
S contains lowercase English letters only.

Solution :

class Solution{   
public:
    long long solve(int X,int Y,string S){
      //code here
      long long answer=0;
      string a="pr";
      string b="rp";
      if(X<Y)
      {
        swap(X,Y);
        swap(a,b);
      }

      stack<char> st;
      for(int i=(int)S.size()-1;i>=0;i--)
      {
        if(st.size()>0&&S[i]==a[0]&&st.top()==a[1])
        {
          st.pop();
          answer+=X;
        }
        else
        {
          st.push(S[i]);
        }
      }

      S="";
      while(st.size()>0){
        S.push_back(st.top());
        st.pop();
      }

      for(int i=(int)S.size()-1;i>=0;i--)
      {
        if(st.size()>0&&S[i]==b[0]&&st.top()==b[1])
        {
          st.pop();
          answer+=Y;
        }
        else
        {
          st.push(S[i]);
        }
      }
      return answer;
    }
};
